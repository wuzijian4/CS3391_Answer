#include <iostream>
#include <queue>
#include <math.h>
using namespace std;

int visited[9999] = {0};
int prime[5000] = {}; // maximum 5000 prime number from 1000 to 9999
struct node
{
	int num;
	int cost;
};


bool isPrime(int n) {
	if (n < 4) return true;
	if ((n & 1) == 0) return false;//is even number 
	
	int sq = (int)sqrt(double(n));

	if (n % 6 != 5 && n % 6 != 1)return false;

	for (int i = 5; i <= sq; i+=6)
	{
		if (n%i == 0 || n % (i + 2) == 0)
			return false;
	}
	return true;
}

int total(int *prime) {
	int count = 0;
	for (int i = 1000; i <= 9999; i++)
	{
		if (isPrime(i))
			prime[count++] = i;
	}
	return count;
}

bool digitCheck(int num1, int num2) {
	int count = 3;
	while (num1!= 0 && num2!=0)
	{
		if (num1 % 10 == num2 % 10)
			count--;
		num1 = num1 / 10;
		num2 = num2 / 10;
	}
	return count == 0; // three digits are the same
}

int bfs(int num1, int num2) {
	if (num1 == num2) return 0;
	int count = total(prime);
	queue<node> st;	
	node q = { num1,0 };
	st.push(q);
	while (!st.empty())
	{
		node q = st.front();
		st.pop();
		for (int i = 0; i < count; i++)
		{
			int num = prime[i];
			if (digitCheck(num, q.num) && visited[num] == 0) {
				node p = { num, q.cost + 1 };
				if (p.num == num2) {
					return p.cost;
				}
				st.push(p);
				visited[p.num] = 1;
			}

		}

	}

	return -1;
}

int main() {
	int cases;
	int num1, num2;
	cin >> cases;
	while (cases--)
	{
		cin >> num1 >> num2;
		int result = bfs(num1, num2);
		for (int i = 1000; i <= 9999; i++)
		{
			visited[i] = 0;
		}
		if (result == -1)
			cout << "Impossible" << endl;
		else
			cout << result << endl;
	}
	return 0;
}
